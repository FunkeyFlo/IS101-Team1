package view.manager;

import connectivity.Luggage;
import connectivity.Luggage.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import main.Main;
import org.jfree.chart.ChartFactory;
//import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public class Manager extends javax.swing.JFrame {

    private List<Luggage> luggage = new ArrayList<>();
    private final Luggage luggageModel = new Luggage();
    private final List<String> CB_YEAR_VALUES1 = getNumYears();
    private final String[] CB_YEAR_VALUES2 = new String[CB_YEAR_VALUES1.size()];
    private final String[] CB_YEAR_VALUES;
    private DefaultCategoryDataset allDataGraph = new DefaultCategoryDataset();
    private DefaultCategoryDataset lostBaggageGraph = new DefaultCategoryDataset();
    private DefaultCategoryDataset foundBaggageGraph = new DefaultCategoryDataset();
    private DefaultCategoryDataset handledBaggageGraph = new DefaultCategoryDataset();
    //private final List<Integer> CB_YEAR_VALUES = getNumYears();
    //private Integer[] CB_YEAR_VALUES_FIN = new Integer[CB_YEAR_VALUES.size()];

    //new Integer[getNumYears()];
    private final String[] MONTHS = {"Jan", "Feb", "Mrt", "Apr", "Mei",
            "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"};
    
    public Manager() {
        initComponents();
        CB_YEAR_VALUES = (String[])CB_YEAR_VALUES1.toArray(CB_YEAR_VALUES2);
        //CB_YEAR_VALUES_FIN = CB_YEAR_VALUES.toArray();
        //Integer[] CBYV = (Integer [])CB_YEAR_VALUES.toArray(CB_YEAR_VALUES_FIN);
        //setGraphs();
        setAllDataGraph(2013, 2013, 1, 12);
        setLostGraph(2013, 2013, 1, 12);
        setFoundGraph(2013, 2013, 1, 12);
        setHandledGraph(2013, 2013, 1, 12);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        overviewPane = new javax.swing.JTabbedPane();
        allGraphsTab = new javax.swing.JPanel();
        allGraphs = new javax.swing.JPanel();
        lostBaggageTab = new javax.swing.JPanel();
        lostBaggage = new javax.swing.JPanel();
        foundBaggageTab = new javax.swing.JPanel();
        foundBaggage = new javax.swing.JPanel();
        handledBaggageTab = new javax.swing.JPanel();
        handledBaggage = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbMonthFrom = new javax.swing.JComboBox();
        cbYearFrom = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cbMonthTo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbYearTo = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        userMenu = new javax.swing.JMenu();
        changePassword = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();

        jLabel1.setText("ingelogd als gebruiker");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        allGraphs.setBorder(javax.swing.BorderFactory.createTitledBorder("Alle data"));
        allGraphs.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout allGraphsTabLayout = new javax.swing.GroupLayout(allGraphsTab);
        allGraphsTab.setLayout(allGraphsTabLayout);
        allGraphsTabLayout.setHorizontalGroup(
            allGraphsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allGraphsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        allGraphsTabLayout.setVerticalGroup(
            allGraphsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allGraphsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab("Alle data", allGraphsTab);

        lostBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder("Vermiste bagage"));
        lostBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout lostBaggageTabLayout = new javax.swing.GroupLayout(lostBaggageTab);
        lostBaggageTab.setLayout(lostBaggageTabLayout);
        lostBaggageTabLayout.setHorizontalGroup(
            lostBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lostBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lostBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        lostBaggageTabLayout.setVerticalGroup(
            lostBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lostBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lostBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab("Vermiste bagage", lostBaggageTab);

        foundBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder("Gevonde bagage"));
        foundBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout foundBaggageTabLayout = new javax.swing.GroupLayout(foundBaggageTab);
        foundBaggageTab.setLayout(foundBaggageTabLayout);
        foundBaggageTabLayout.setHorizontalGroup(
            foundBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foundBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foundBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        foundBaggageTabLayout.setVerticalGroup(
            foundBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foundBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foundBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab("Gevonde baggage", foundBaggageTab);

        handledBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder("Afgehandelde Bagage"));
        handledBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout handledBaggageTabLayout = new javax.swing.GroupLayout(handledBaggageTab);
        handledBaggageTab.setLayout(handledBaggageTabLayout);
        handledBaggageTabLayout.setHorizontalGroup(
            handledBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(handledBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(handledBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );
        handledBaggageTabLayout.setVerticalGroup(
            handledBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(handledBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(handledBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab("Afgehandelde baggage", handledBaggageTab);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Opties"));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Van"));

        jLabel2.setText("Jaar");

        jLabel3.setText("Maand");

        cbMonthFrom.setMaximumRowCount(12);
        cbMonthFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December" }));

        cbYearFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbMonthFrom, 0, 101, Short.MAX_VALUE)
                    .addComponent(cbYearFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbYearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbMonthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tot"));

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbMonthTo.setMaximumRowCount(12);
        cbMonthTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December" }));

        jLabel4.setText("Maand");

        jLabel5.setText("Jaar");

        cbYearTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013" }));
        cbYearTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearToActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbMonthTo, 0, 101, Short.MAX_VALUE)
                            .addComponent(cbYearTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbYearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbMonthTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel))
        );

        userMenu.setText("Gebruiker");

        changePassword.setText("Wachtwoord wijzigen..");
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });
        userMenu.add(changePassword);

        logout.setText("Uitloggen");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        userMenu.add(logout);

        menuBar.add(userMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(overviewPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(overviewPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setAllDataGraph(int beginYear, int endYear,
            int beginMonth, int endMonth) {
        List<Integer> numTimesLost = new ArrayList<>();
        List<Integer> numTimesFound = new ArrayList<>();
        List<Integer> numTimesRtrnd = new ArrayList<>();
        List<String> months = new ArrayList<>();
        //List<String> years = new ArrayList<>(); DEL
        List<String> yyyyMM = new ArrayList<>();
        String yyyy;
        String mm;
        String insertZero;
        int currentYear = beginYear;
        boolean nextYear = false;
        //String mon; DEL
        int month = beginMonth - 1;
        //int lol = 0; DEL
        
        int numYears = endYear - beginYear == 0 ? 1 : (endYear - beginYear) + 1;
        int numMonths = ((numYears * 12) - beginMonth) - (12 - endMonth) + 1;
//        System.out.println(numMonths);
//        DEL
//        for (int i = beginYear; i <= endYear; i++) {
//            mon = Integer.toString(i);
//            years.add(mon);
//            //System.out.println(years.get(lol));
//            //lol++;
//        }
        
        for (int i = 0; i < numMonths; i++) {
            month = month == 12 ? 1 : month + 1;
            currentYear = nextYear ? currentYear + 1 : currentYear;
            nextYear = month == 12;
            if (month<=9) {
                insertZero = "0";
            } else insertZero = "";
            yyyyMM.add(Integer.toString(currentYear) + "-" 
                    + insertZero + Integer.toString(month));
            System.out.println(yyyyMM.get(i));
        }
        
        //Value for lost luggage
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(6, yyyyMM.get(i), 0);
            numTimesLost.add(0);
            while (numTimesLost.get(i) < luggage.size()) {
                numTimesLost.set(i, numTimesLost.get(i) + 1);
            }
        }
        
        //Value for found luggage
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(7, yyyyMM.get(i), 0);
            numTimesFound.add(0);
            while (numTimesFound.get(i) < luggage.size()) {
                numTimesFound.set(i, numTimesFound.get(i) + 1);
            }
        }

        //Value for handled luggage
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(8, yyyyMM.get(i), 0);
            numTimesRtrnd.add(0);
            while (numTimesRtrnd.get(i) < luggage.size()) {
                numTimesRtrnd.set(i, numTimesRtrnd.get(i) + 1);
            }
        }
        
        for (int i = 0; i < numMonths; i++) {
            //all graphs
            allDataGraph.setValue(numTimesLost.get(i), "Verloren", yyyyMM.get(i));
            allDataGraph.setValue(numTimesFound.get(i), "Gevonden", yyyyMM.get(i));
            allDataGraph.setValue(numTimesRtrnd.get(i), "Afgehandeld", yyyyMM.get(i));
        }

        /**
         * ALL DATA GRAPH
         */
        final String CHART_NAME = "Verloren, gevonden en afgehandelde baggage per maand";
        final String X_AXIS_NAME = "Maand";
        final String Y_AXIS_NAME = "Aantal";
        JFreeChart allGraphsChart = ChartFactory.createBarChart
                (CHART_NAME, X_AXIS_NAME, Y_AXIS_NAME, allDataGraph, 
                PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot allGraphsPlot = allGraphsChart.getCategoryPlot();
        allGraphsPlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel allGraphsPanel = new ChartPanel(allGraphsChart);

        allGraphs.setLayout(new BorderLayout());
        allGraphs.add(allGraphsPanel, BorderLayout.CENTER);
        allGraphs.setSize(300, 200);
        allGraphs.validate();

    }
    
    private void setLostGraph(int beginYear, int endYear, 
            int beginMonth, int endMonth) {
        List<Integer> numLostPerMonth = new ArrayList<>();
        List<String> months = new ArrayList<>();
        List<String> yyyyMM = new ArrayList<>();
        String yyyy;
        String mm;
        String insertZero;
        int currentYear = beginYear;
        int month = beginMonth - 1;
        int numYears, numMonths;
        boolean isNextYear = false;
        
        numYears = endYear - beginYear == 0 ? 1 : (endYear - beginYear) + 1;
        numMonths = ((numYears * 12) - beginMonth) - (12 - endMonth) + 1;
        
        for (int i = 0; i < numMonths; i++) {
            month = month == 12 ? 1 : month + 1;
            currentYear = isNextYear ? currentYear + 1 : currentYear;
            isNextYear = month == 12;
            if (month<=9) {
                insertZero = "0";
            } else insertZero = "";
            yyyyMM.add(Integer.toString(currentYear) + "-" 
                    + insertZero + Integer.toString(month));
            System.out.println(yyyyMM.get(i));
        }
        
        //Value for lost luggage
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(6, yyyyMM.get(i), 0);
            numLostPerMonth.add(0);
            while (numLostPerMonth.get(i) < luggage.size()) {
                numLostPerMonth.set(i, numLostPerMonth.get(i) + 1);
            }
        }
        
        for (int i = 0; i < numMonths; i++) {
            lostBaggageGraph.setValue(numLostPerMonth.get(i), "Verloren", yyyyMM.get(i));
        }
        
        final String CHART_NAME = "Verloren baggage";
        final String X_AXIS_NAME = "Maand/Jaar";
        final String Y_AXIS_NAME = "Aantal";
        JFreeChart lostBaggageChart = ChartFactory.createBarChart3D(CHART_NAME, X_AXIS_NAME, Y_AXIS_NAME, lostBaggageGraph, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot lostBaggagePlot = lostBaggageChart.getCategoryPlot();
        lostBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel lostBaggagePanel = new ChartPanel(lostBaggageChart);

        lostBaggage.setLayout(new BorderLayout());
        lostBaggage.add(lostBaggagePanel, BorderLayout.CENTER);
        lostBaggage.validate();

  
    }
    
    private void setFoundGraph(int beginYear, int endYear, 
            int beginMonth, int endMonth) {
        List<Integer> numFoundPerMonth = new ArrayList<>();
        List<String> months = new ArrayList<>();
        List<String> yyyyMM = new ArrayList<>();
        String yyyy;
        String mm;
        String insertZero;
        int currentYear = beginYear;
        int month = beginMonth - 1;
        int numYears, numMonths;
        boolean isNextYear = false;
        
        //calculates amount of months given
        numYears = endYear - beginYear == 0 ? 1 : (endYear - beginYear) + 1;
        numMonths = ((numYears * 12) - beginMonth) - (12 - endMonth) + 1;
        
        //creates array containing Year-Month (yyyy-mm) strings
        for (int i = 0; i < numMonths; i++) {
            month = month == 12 ? 1 : month + 1;
            currentYear = isNextYear ? currentYear + 1 : currentYear;
            isNextYear = month == 12;
            if (month<=9) {
                insertZero = "0";
            } else insertZero = "";
            yyyyMM.add(Integer.toString(currentYear) + "-" 
                    + insertZero + Integer.toString(month));
        }
        
        //gets luggage data
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(7, yyyyMM.get(i), 0);
            numFoundPerMonth.add(0);
            while (numFoundPerMonth.get(i) < luggage.size()) {
                numFoundPerMonth.set(i, numFoundPerMonth.get(i) + 1);
            }
        }
        
        //sets data
        for (int i = 0; i < numMonths; i++) {
            foundBaggageGraph.setValue(numFoundPerMonth.get(i), "Verloren", yyyyMM.get(i));
        }
        
        //creates graph
        final String CHART_NAME = "Gevonden baggage";
        final String X_AXIS_NAME = "Maand/Jaar";
        final String Y_AXIS_NAME = "Aantal";
        JFreeChart foundBaggageChart = ChartFactory.createBarChart3D(CHART_NAME, X_AXIS_NAME, Y_AXIS_NAME, foundBaggageGraph, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot foundBaggagePlot = foundBaggageChart.getCategoryPlot();
        foundBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel foundBaggagePanel = new ChartPanel(foundBaggageChart);

        //applies graph to panel
        foundBaggage.setLayout(new BorderLayout());
        foundBaggage.add(foundBaggagePanel, BorderLayout.CENTER);
        foundBaggage.validate();
    }
    
    private void setHandledGraph(int beginYear, int endYear, 
            int beginMonth, int endMonth) {
        List<Integer> numHandledPerMonth = new ArrayList<>();
        List<String> months = new ArrayList<>();
        List<String> yyyyMM = new ArrayList<>();
        String yyyy;
        String mm;
        String insertZero;
        int currentYear = beginYear;
        int month = beginMonth - 1;
        int numYears, numMonths;
        boolean isNextYear = false;
        
        //calculates amount of months given
        numYears = endYear - beginYear == 0 ? 1 : (endYear - beginYear) + 1;
        numMonths = ((numYears * 12) - beginMonth) - (12 - endMonth) + 1;
        
        //creates array containing Year-Month (yyyy-mm) strings
        for (int i = 0; i < numMonths; i++) {
            month = month == 12 ? 1 : month + 1;
            currentYear = isNextYear ? currentYear + 1 : currentYear;
            isNextYear = month == 12;
            if (month<=9) {
                insertZero = "0";
            } else insertZero = "";
            yyyyMM.add(Integer.toString(currentYear) + "-" 
                    + insertZero + Integer.toString(month));
        }
        
        //gets luggage data
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = luggageModel.searchLuggageList(8, yyyyMM.get(i), 0);
            numHandledPerMonth.add(0);
            while (numHandledPerMonth.get(i) < luggage.size()) {
                numHandledPerMonth.set(i, numHandledPerMonth.get(i) + 1);
            }
        }
        
        //sets data
        for (int i = 0; i < numMonths; i++) {
            handledBaggageGraph.setValue(numHandledPerMonth.get(i), "Afgehandeld", yyyyMM.get(i));
        }
        
        //creates graph
        final String CHART_NAME = "Afgehandelde baggage";
        final String X_AXIS_NAME = "Maand/Jaar";
        final String Y_AXIS_NAME = "Aantal";
        JFreeChart handledBaggageChart = ChartFactory.createBarChart3D(CHART_NAME, X_AXIS_NAME, Y_AXIS_NAME, handledBaggageGraph, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot handledBaggagePlot = handledBaggageChart.getCategoryPlot();
        handledBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel handledBaggagePanel = new ChartPanel(handledBaggageChart);

        //applies graph to panel
        handledBaggage.setLayout(new BorderLayout());
        handledBaggage.add(handledBaggagePanel, BorderLayout.CENTER);
        handledBaggage.validate();
    }
    
    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
        Main.displayChangeMyPassword();
    }//GEN-LAST:event_changePasswordActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        dispose();
        Main.displayLogin();
    }//GEN-LAST:event_logoutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        System.out.println(tfYear.getText());
//        System.out.println(tfMonth.getSelectedItem());

        int yearF = cbYearFrom.getSelectedIndex() + 2010,
            yearT = cbYearTo.getSelectedIndex() + 2010,
            monthF = cbMonthFrom.getSelectedIndex() + 1,
            monthT = cbMonthTo.getSelectedIndex() + 1;
        System.out.println(yearF + "\n" + yearT + "\n" + monthF 
                + "\n" + monthT);
        setAllDataGraph(yearF, yearT, monthF, monthT);
        setLostGraph(yearF, yearT, monthF, monthT);
        setFoundGraph(yearF, yearT, monthF, monthT);
        setHandledGraph(yearF, yearT, monthF, monthT);
        
        String yearFrom = cbYearFrom.getSelectedItem().toString(), zeroFrom = "",
                yearTo = cbYearTo.getSelectedItem().toString(), zeroTo = "";
        int monthFrom = cbMonthFrom.getSelectedIndex() + 1;
        int monthTo = cbMonthTo.getSelectedIndex() + 1;

        if (monthFrom < 10) {
            zeroFrom = "0";
        }

        if (monthTo < 10) {
            zeroTo = "0";
        }

        String searchArgFrom = yearFrom + "-" + zeroFrom + monthFrom;
        String searchArgTo = yearTo + "-" + zeroTo + monthTo;
        System.out.println(searchArgFrom);
        System.out.println(searchArgTo);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbYearToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbYearToActionPerformed

    private List<String> getNumYears() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy");
        Date date = new Date();
        int currentDate = date.getDate();
        List<String> num = new ArrayList<>();
        for (int i = 2010; i < currentDate; i++) {
            num.add(Integer.toString(i));
        }
        return num;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Manager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allGraphs;
    private javax.swing.JPanel allGraphsTab;
    private javax.swing.JComboBox cbMonthFrom;
    private javax.swing.JComboBox cbMonthTo;
    private javax.swing.JComboBox cbYearFrom;
    private javax.swing.JComboBox cbYearTo;
    private javax.swing.JMenuItem changePassword;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JPanel foundBaggage;
    private javax.swing.JPanel foundBaggageTab;
    private javax.swing.JPanel handledBaggage;
    private javax.swing.JPanel handledBaggageTab;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JMenuItem logout;
    private javax.swing.JPanel lostBaggage;
    private javax.swing.JPanel lostBaggageTab;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane overviewPane;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables

}