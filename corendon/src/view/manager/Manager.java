package view.manager;

import connectivity.QueryManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import main.Main;
import main.Session;
import model.Luggage;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 * @author IS101 Team 1
 */
public class Manager extends javax.swing.JFrame {

    private final QueryManager query = new QueryManager();
    private static final Font X_AXIS_FONT = new Font("Verdana", Font.PLAIN, 8);

    //    private Locale locale = new Locale("nl", "NL");
    private static final ResourceBundle BUNDLE
            = ResourceBundle.getBundle("languages.ResourceBundle"); //, locale

    private static final String ALL_LUGGAGE_DATA_GRAPH_NAME
            = BUNDLE.getString("allStatusLuggage");

    private static final String LOST_LUGGAGE_GRAPH_NAME
            = BUNDLE.getString("missingLuggage");

    private static final String FOUND_LUGGAGE_GRAPH_NAME
            = BUNDLE.getString("foundLuggage");

    private static final String HANDLED_LUGGAGE_GRAPH_NAME
            = BUNDLE.getString("handledLuggage");

    private static final String[] MONTHS = {BUNDLE.getString("Jan"),
        BUNDLE.getString("Feb"), BUNDLE.getString("Mar"), BUNDLE.getString("Apr"),
        BUNDLE.getString("May"), BUNDLE.getString("Jun"), BUNDLE.getString("Jul"),
        BUNDLE.getString("Aug"), BUNDLE.getString("Sep"), BUNDLE.getString("Oct"),
        BUNDLE.getString("Nov"), BUNDLE.getString("Dec")};

    private static final String X_AXIS_NAME = BUNDLE.getString("xAxis");
    private static final String Y_AXIS_NAME = BUNDLE.getString("yAxis");

    private static final int LOST_LUGGAGE_DBFIELD = 6;
    private static final int FOUND_LUGGAGE_DBFIELD = 8;
    private static final int HANDLED_LUGGAGE_DBFIELD = 10;
    private static final int BEGIN_YEAR = 2010;
    private static final String DATE_LOST_COLUMN = "date_lost";
    private static final String DATE_FOUND_COLUMN = "date_found";
    private static final String DATE_HANDLED_COLUMN = "date_handled";

    private static final Color TRANS = new Color(0xFF, 0xFF, 0xFF, 0);

    public Manager() {
        initComponents();
        int CURRENT_YEAR = getCurrentYear();
        setAllDataGraph(CURRENT_YEAR, CURRENT_YEAR, 1, 12, false);
        setLostLuggageGraph(CURRENT_YEAR, CURRENT_YEAR, 1, 12, false);
        setFoundLuggageGraph(CURRENT_YEAR, CURRENT_YEAR, 1, 12, false);
        setHandledLuggageGraph(CURRENT_YEAR, CURRENT_YEAR, 1, 12);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        overviewPane = new javax.swing.JTabbedPane();
        allGraphsTab = new javax.swing.JPanel();
        allGraphs = new javax.swing.JPanel();
        lostBaggageTab = new javax.swing.JPanel();
        lostBaggage = new javax.swing.JPanel();
        foundBaggageTab = new javax.swing.JPanel();
        foundBaggage = new javax.swing.JPanel();
        handledBaggageTab = new javax.swing.JPanel();
        handledBaggage = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        errorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbMonthFrom = new javax.swing.JComboBox();
        cbYearFrom = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        buttonUpdateAllDataGraph = new javax.swing.JButton();
        cbMonthTo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbYearTo = new javax.swing.JComboBox();
        labelError = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        cbShowAll = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        userMenu = new javax.swing.JMenu();
        changePassword = new javax.swing.JMenuItem();
        logout = new javax.swing.JMenuItem();

        jLabel1.setText("ingelogd als gebruiker");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(BUNDLE.getString("manager") + " - " + Session.storedFirstName + " " + Session.storedLastName);

        allGraphs.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("allData")));
        allGraphs.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout allGraphsTabLayout = new javax.swing.GroupLayout(allGraphsTab);
        allGraphsTab.setLayout(allGraphsTabLayout);
        allGraphsTabLayout.setHorizontalGroup(
            allGraphsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allGraphsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );
        allGraphsTabLayout.setVerticalGroup(
            allGraphsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allGraphsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allGraphs, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab(BUNDLE.getString("allData"), allGraphsTab);

        lostBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("missingLuggage")));
        lostBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout lostBaggageTabLayout = new javax.swing.GroupLayout(lostBaggageTab);
        lostBaggageTab.setLayout(lostBaggageTabLayout);
        lostBaggageTabLayout.setHorizontalGroup(
            lostBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lostBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lostBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );
        lostBaggageTabLayout.setVerticalGroup(
            lostBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lostBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lostBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab(BUNDLE.getString("missingLuggage")
            , lostBaggageTab);

        foundBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("foundLuggage")));
        foundBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout foundBaggageTabLayout = new javax.swing.GroupLayout(foundBaggageTab);
        foundBaggageTab.setLayout(foundBaggageTabLayout);
        foundBaggageTabLayout.setHorizontalGroup(
            foundBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foundBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foundBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );
        foundBaggageTabLayout.setVerticalGroup(
            foundBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foundBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foundBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab(BUNDLE.getString("foundLuggage"), foundBaggageTab);

        handledBaggage.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("handledLuggage")));
        handledBaggage.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout handledBaggageTabLayout = new javax.swing.GroupLayout(handledBaggageTab);
        handledBaggageTab.setLayout(handledBaggageTabLayout);
        handledBaggageTabLayout.setHorizontalGroup(
            handledBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(handledBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(handledBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );
        handledBaggageTabLayout.setVerticalGroup(
            handledBaggageTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(handledBaggageTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(handledBaggage, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );

        overviewPane.addTab(BUNDLE.getString("handledLuggage"), handledBaggageTab);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("options")));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("from")));

        jLabel2.setText(BUNDLE.getString("year"));

        jLabel3.setText(BUNDLE.getString("month"));

        cbMonthFrom.setMaximumRowCount(12);
        cbMonthFrom.setModel(new javax.swing.DefaultComboBoxModel(BUNDLE.getStringArray("months")));
        cbMonthFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMonthFromActionPerformed(evt);
            }
        });

        cbYearFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013", "2014" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbMonthFrom, 0, 101, Short.MAX_VALUE)
                    .addComponent(cbYearFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbYearFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbMonthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("to")));

        buttonUpdateAllDataGraph.setText(BUNDLE.getString("update"));
        buttonUpdateAllDataGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateAllDataGraphActionPerformed(evt);
            }
        });

        cbMonthTo.setMaximumRowCount(12);
        cbMonthTo.setModel(new javax.swing.DefaultComboBoxModel(BUNDLE.getStringArray("months")));

        jLabel4.setText(BUNDLE.getString("month"));

        jLabel5.setText(BUNDLE.getString("year"));

        cbYearTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2010", "2011", "2012", "2013", "2014" }));
        cbYearTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearToActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbMonthTo, 0, 101, Short.MAX_VALUE)
                            .addComponent(cbYearTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(labelError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonUpdateAllDataGraph)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbYearTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbMonthTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(buttonUpdateAllDataGraph)
                        .addContainerGap())
                    .addComponent(labelError, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(BUNDLE.getString("otherOptions")));

        cbShowAll.setText(BUNDLE.getString("seeAllData1"));
        cbShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShowAllActionPerformed(evt);
            }
        });

        jLabel6.setText(BUNDLE.getString("seeAllData2"));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbShowAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(cbShowAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel))
        );

        userMenu.setText(BUNDLE.getString("options"));

        changePassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/changePassword.png"))); // NOI18N
        changePassword.setText(BUNDLE.getString("changePassword"));
        changePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordActionPerformed(evt);
            }
        });
        userMenu.add(changePassword);

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout.png"))); // NOI18N
        logout.setText(BUNDLE.getString("logout"));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        userMenu.add(logout);

        menuBar.add(userMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(overviewPane)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(overviewPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates the graph for that will display all the luggage.
     *
     * @param beginYear the year where the graph starts, as specified by the
     * user
     * @param endYear the year where the graph ends
     * @param beginMonth the month in the year where the graph starts
     * @param endMonth the month in the year where the graph ends
     */
    private void setAllDataGraph(int beginYear, int endYear,
            int beginMonth, int endMonth, boolean showAll) {
        DefaultCategoryDataset allDataGraph
                = new DefaultCategoryDataset();
        allDataGraph.clear();

//        Object[] start = query.countLuggage("date_handled", 3, 2014, 1,
////            2014, 12);
//        List<Integer> count = (List<Integer>) start[0];
//        List<String> yearmonth = (List<String>) start[1];
        List<Integer> countLost = query.countLuggage(DATE_LOST_COLUMN,1,beginYear,beginMonth,
                endYear,endMonth,showAll);
        List<Integer> countFound = query.countLuggage(DATE_FOUND_COLUMN,2,beginYear,beginMonth,
                endYear,endMonth,showAll);
        List<Integer> countHandled = query.countLuggage(DATE_HANDLED_COLUMN,3,beginYear,beginMonth,
                endYear,endMonth,showAll);
        
//        for (int i = 0; i < count.size(); i++) {
//            System.out.println(count.get(i) + " ----- " + yearmonth.get(i));
//        }
        
        int numMonths = giveNumMonths(beginYear, endYear,
                beginMonth, endMonth);
//        List<String> yearsAndMonths = generateDates(beginYear, endYear,
//                beginMonth, endMonth);
        ArrayList<String> xAxisLabels = giveXaxisLabels(numMonths, beginMonth,
                beginYear);

//        List<Integer> numTimesLost = getAmountLuggage(numMonths,
//                LOST_LUGGAGE_DBFIELD + showIfAttributeNotTrue, yearsAndMonths);
//        List<Integer> numTimesFound = getAmountLuggage(numMonths,
//                FOUND_LUGGAGE_DBFIELD + showIfAttributeNotTrue, yearsAndMonths);
//        List<Integer> numTimesHandled = getAmountLuggage(numMonths,
//                HANDLED_LUGGAGE_DBFIELD, yearsAndMonths);

        for (int i = 0; i < xAxisLabels.size(); i++) {
            //all graphs
            allDataGraph.setValue(countLost.get(i),
                    LOST_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
            allDataGraph.setValue(countFound.get(i),
                    FOUND_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
            allDataGraph.setValue(countHandled.get(i),
                    HANDLED_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
        }

        //creates the graph
        JFreeChart allGraphsChart = ChartFactory.createLineChart(
                ALL_LUGGAGE_DATA_GRAPH_NAME, X_AXIS_NAME, Y_AXIS_NAME,
                allDataGraph);

        CategoryPlot allGraphsPlot = allGraphsChart.getCategoryPlot();
        CategoryAxis xAxis = allGraphsPlot.getDomainAxis();
        xAxis.setTickLabelFont(X_AXIS_FONT);
        NumberAxis numberAxis = (NumberAxis) allGraphsPlot.getRangeAxis();
        numberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        allGraphsPlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel lostBaggagePanel = new ChartPanel(allGraphsChart);
        allGraphsChart.setBackgroundPaint(TRANS);

        //applies the graph to the panel
        allGraphs.setLayout(new BorderLayout());
        allGraphs.add(lostBaggagePanel, BorderLayout.CENTER);
        allGraphs.validate();

    }

    /**
     * Creates the graph for all lost luggage data
     *
     * @param beginYear the year where the graph starts, as specified by the
     * user
     * @param endYear the year where the graph ends
     * @param beginMonth the month in the year where the graph starts
     * @param endMonth the month in the year where the graph ends
     */
    private void setLostLuggageGraph(int beginYear, int endYear,
            int beginMonth, int endMonth, boolean dontShowAll) {
        DefaultCategoryDataset lostBaggageGraph
                = new DefaultCategoryDataset();
        lostBaggageGraph.clear();

        List<Integer> count = query.countLuggage(DATE_LOST_COLUMN,1,beginYear,beginMonth,
                endYear,endMonth,dontShowAll);
        
        int numMonths = giveNumMonths(beginYear, endYear,
                beginMonth, endMonth);
        List<String> yearsAndMonths = generateDates(beginYear, endYear,
                beginMonth, endMonth);
        ArrayList<String> xAxisLabels = giveXaxisLabels(numMonths, beginMonth,
                beginYear);

//        List<Integer> numLostPerMonth = getAmountLuggage(numMonths,
//                LOST_LUGGAGE_DBFIELD + showIfAttributeNotTrue, yearsAndMonths);

        for (int i = 0; i < numMonths; i++) {
            lostBaggageGraph.setValue(count.get(i),
                    LOST_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
        }

        JFreeChart lostBaggageChart = ChartFactory.createLineChart(
                LOST_LUGGAGE_GRAPH_NAME, X_AXIS_NAME, Y_AXIS_NAME,
                lostBaggageGraph);

        CategoryPlot lostBaggagePlot = lostBaggageChart.getCategoryPlot();
        CategoryAxis xAxis = lostBaggagePlot.getDomainAxis();
        xAxis.setTickLabelFont(X_AXIS_FONT);
        NumberAxis numberAxis = (NumberAxis) lostBaggagePlot.getRangeAxis();
        numberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        lostBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel lostBaggagePanel = new ChartPanel(lostBaggageChart);
        lostBaggageChart.setBackgroundPaint(TRANS);

        lostBaggage.setLayout(new BorderLayout());
        lostBaggage.add(lostBaggagePanel, BorderLayout.CENTER);
        lostBaggage.validate();

    }

    /**
     * Creates the graph for all found luggage data
     *
     * @param beginYear the year where the graph begins, as specified by the
     * user
     * @param endYear the year where the graph ends
     * @param beginMonth the month in the year where the graph begins
     * @param endMonth the month in the year where the graph ends
     */
    private void setFoundLuggageGraph(int beginYear, int endYear,
            int beginMonth, int endMonth, boolean dontShowAll) {
        DefaultCategoryDataset foundBaggageGraph
                = new DefaultCategoryDataset();
        foundBaggageGraph.clear();

        List<Integer> count = query.countLuggage(DATE_FOUND_COLUMN,2,beginYear,beginMonth,
                endYear,endMonth,dontShowAll);
        
        int numMonths = giveNumMonths(beginYear, endYear, beginMonth, endMonth);
        List<String> yearsAndMonths
                = generateDates(beginYear, endYear, beginMonth, endMonth);
        ArrayList<String> xAxisLabels = giveXaxisLabels(numMonths, beginMonth,
                beginYear);

//        List<Integer> numFoundPerMonth = getAmountLuggage(numMonths,
//                FOUND_LUGGAGE_DBFIELD + showIfAttributeNotTrue, yearsAndMonths);

        //sets data
        for (int i = 0; i < numMonths; i++) {
            foundBaggageGraph.setValue(count.get(i),
                    FOUND_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
        }

        //creates graph
        JFreeChart foundBaggageChart = ChartFactory.createLineChart(
                FOUND_LUGGAGE_GRAPH_NAME, X_AXIS_NAME, Y_AXIS_NAME,
                foundBaggageGraph);

        CategoryPlot foundBaggagePlot = foundBaggageChart.getCategoryPlot();
        CategoryAxis xAxis = foundBaggagePlot.getDomainAxis();
        xAxis.setTickLabelFont(X_AXIS_FONT);
        NumberAxis numberAxis = (NumberAxis) foundBaggagePlot.getRangeAxis();
        numberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        foundBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel foundBaggagePanel = new ChartPanel(foundBaggageChart);
        foundBaggageChart.setBackgroundPaint(new Color(0xFF, 0xFF, 0xFF, 0));
        foundBaggageChart.setBackgroundPaint(TRANS);

        //applies graph to panel
        foundBaggage.setLayout(new BorderLayout());
        foundBaggage.add(foundBaggagePanel, BorderLayout.CENTER);
        foundBaggage.validate();
    }

    /**
     * Creates the graph for all handled luggage data
     *
     * @param beginYear the year where the graph starts, as specified by the
     * user
     * @param endYear the year where the graph ends
     * @param beginMonth the month in the year where the graph begins
     * @param endMonth the month in the year where the graph ends
     */
    private void setHandledLuggageGraph(int beginYear, int endYear,
            int beginMonth, int endMonth) {
        DefaultCategoryDataset handledBaggageGraph
                = new DefaultCategoryDataset();
        handledBaggageGraph.clear();

        List<Integer> count = query.countLuggage(DATE_HANDLED_COLUMN,3,beginYear,beginMonth,
                endYear,endMonth,true);
        
        List<String> yearsAndMonths = generateDates(beginYear, endYear,
                beginMonth, endMonth);
        int numMonths = giveNumMonths(beginYear, endYear,
                beginMonth, endMonth);
        ArrayList<String> xAxisLabels = giveXaxisLabels(numMonths, beginMonth,
                beginYear);

        List<Integer> numHandledPerMonth = getAmountLuggage(numMonths,
                HANDLED_LUGGAGE_DBFIELD, yearsAndMonths);

        //sets data
        for (int i = 0; i < numMonths; i++) {
            handledBaggageGraph.setValue(count.get(i),
                    HANDLED_LUGGAGE_GRAPH_NAME, xAxisLabels.get(i));
        }

        //creates graph
        JFreeChart handledBaggageChart = ChartFactory.createLineChart(
                HANDLED_LUGGAGE_GRAPH_NAME, X_AXIS_NAME, Y_AXIS_NAME,
                handledBaggageGraph);

        CategoryPlot handledBaggagePlot = handledBaggageChart.getCategoryPlot();
        CategoryAxis xAxis = handledBaggagePlot.getDomainAxis();
        xAxis.setTickLabelFont(X_AXIS_FONT);
        NumberAxis numberAxis = (NumberAxis) handledBaggagePlot.getRangeAxis();
        numberAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        handledBaggagePlot.setRangeGridlinePaint(Color.BLACK);
        ChartPanel handledBaggagePanel = new ChartPanel(handledBaggageChart);
        handledBaggageChart.setBackgroundPaint(TRANS);

        //applies graph to panel
        handledBaggage.setLayout(new BorderLayout());
        handledBaggage.add(handledBaggagePanel, BorderLayout.CENTER);
        handledBaggage.validate();
    }


    private void cbYearToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbYearToActionPerformed

    /**
     * Gets months and years the user would like to view luggage data in, and
     * gives them as parameters to all set graph methods.
     *
     * @param evt
     */
    private void buttonUpdateAllDataGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateAllDataGraphActionPerformed
        int yearFrom = cbYearFrom.getSelectedIndex() + BEGIN_YEAR,
                yearTo = cbYearTo.getSelectedIndex() + BEGIN_YEAR,
                monthFrom = cbMonthFrom.getSelectedIndex() + 1,
                monthTo = cbMonthTo.getSelectedIndex() + 1;
        boolean dontShowAll = !(cbShowAll.isSelected());
        if (yearFrom > yearTo) {
            errorPopUp(BUNDLE.getString("beginDate"));
        } else {
            setAllDataGraph(yearFrom, yearTo, monthFrom, monthTo,
                    dontShowAll);
            setLostLuggageGraph(yearFrom, yearTo, monthFrom, monthTo,
                    dontShowAll);
            setFoundLuggageGraph(yearFrom, yearTo, monthFrom, monthTo,
                    dontShowAll);
            setHandledLuggageGraph(yearFrom, yearTo, monthFrom, monthTo);
        }
    }//GEN-LAST:event_buttonUpdateAllDataGraphActionPerformed

    private void cbShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbShowAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbShowAllActionPerformed

    private void changePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordActionPerformed
        Main.displayChangePassword();
    }//GEN-LAST:event_changePasswordActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        dispose();
        Main.displayLogin();
    }//GEN-LAST:event_logoutActionPerformed

    private void cbMonthFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMonthFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbMonthFromActionPerformed

    /**
     * @return amount of months between begin year and month and end year and
     * month.
     */
    private static int giveNumMonths(int beginYear, int endYear,
            int beginMonth, int endMonth) 
    {
        int numYears = endYear - beginYear == 0
                ? 1 : (endYear - beginYear) + 1;
        int numMonths = ((numYears * 12) - beginMonth) - (12 - endMonth) + 1;
        return numMonths;
    }

    /**
     * Generates array of strings that will be used in sql statements and shown
     * under the X axis of the graph.
     *
     * @param beginYear the first year the graph will show
     * @param endYear the last year the graph will show
     * @param beginMonth the first month in the first year the graph will show
     * @param endMonth the last month in the last year the graph will show
     * @return String array of format 'yyyy-mm'
     * @see getAmountLuggage
     */
    private List<String> generateDates(int beginYear, int endYear,
            int beginMonth, int endMonth) 
    {
        List<String> yearsAndMonths = new ArrayList<>();
        int currentMonth = beginMonth - 1;
        int currentYear = beginYear;
        boolean isNextYear = false;
        String insertZero;

        int numMonths = giveNumMonths(beginYear, endYear,
                beginMonth, endMonth);

        for (int i = 0; i < numMonths; i++) {
            currentMonth = currentMonth == 12 ? 1 : currentMonth + 1;
            currentYear = isNextYear ? currentYear + 1 : currentYear;
            isNextYear = currentMonth == 12;
            if (currentMonth <= 9) {
                insertZero = "0";
            } else {
                insertZero = "";
            }
            yearsAndMonths.add(Integer.toString(currentYear) + "-"
                    + insertZero + Integer.toString(currentMonth));
        }

        return yearsAndMonths;
    }

    private ArrayList<String> giveXaxisLabels(int numMonths, int beginMonth,
            int beginYear) 
    {
        ArrayList<String> xAxisLabels = new ArrayList<>();
        numMonths += beginMonth;
        beginYear -= 2000;
        int currentMonth = beginMonth;
        for (int i = beginMonth; i < numMonths; i++) {
            if (currentMonth >= 13) {
                currentMonth = 1;
                beginYear++;
            }
            switch (currentMonth) {
                case 1:
                    xAxisLabels.add(MONTHS[0] + " '" + beginYear);
                    break;
                case 2:
                    xAxisLabels.add(MONTHS[1] + " '" + beginYear);
                    break;
                case 3:
                    xAxisLabels.add(MONTHS[2] + " '" + beginYear);
                    break;
                case 4:
                    xAxisLabels.add(MONTHS[3] + " '" + beginYear);
                    break;
                case 5:
                    xAxisLabels.add(MONTHS[4] + " '" + beginYear);
                    break;
                case 6:
                    xAxisLabels.add(MONTHS[5] + " '" + beginYear);
                    break;
                case 7:
                    xAxisLabels.add(MONTHS[6] + " '" + beginYear);
                    break;
                case 8:
                    xAxisLabels.add(MONTHS[7] + " '" + beginYear);
                    break;
                case 9:
                    xAxisLabels.add(MONTHS[8] + " '" + beginYear);
                    break;
                case 10:
                    xAxisLabels.add(MONTHS[9] + " '" + beginYear);
                    break;
                case 11:
                    xAxisLabels.add(MONTHS[10] + " '" + beginYear);
                    break;
                case 12:
                    xAxisLabels.add(MONTHS[11] + " '" + beginYear);
                    break;
                default:
                    xAxisLabels.add("? '?");
                    break;
            }
            currentMonth++;
        }
        return xAxisLabels;
    }

    /**
     * Used in the graphs to display information of the current year at startup.
     *
     * @return the current year.
     */
    private static int getCurrentYear() 
    {
        return Calendar.getInstance().get(Calendar.YEAR);
    }

    /**
     * gets an amount of luggage for the specified months
     *
     * @param numMonths how many months worth of data should be returned
     * @param dbField parameter for searchLuggageList method
     * @param yearsAndMonths String array passed on as searchArg parameter in
     * the searchLuggageList method
     * @return amount of luggage
     */
    private List<Integer> getAmountLuggage(int numMonths, int dbField,
            List<String> yearsAndMonths) 
    {
        List<Luggage> luggage = new ArrayList<>();
        List<Integer> numTimesLost = new ArrayList<>();
        for (int i = 0; i < numMonths; i++) {
            luggage.clear();
            luggage = query.searchLuggageList(dbField,
                    yearsAndMonths.get(i), 0);
            numTimesLost.add(0);
            while (numTimesLost.get(i) < luggage.size()) {
                numTimesLost.set(i, numTimesLost.get(i) + 1);
            }
        }
        return numTimesLost;
    }

    private void errorPopUp(String errorMessage) 
    {
        Component errorPopUp = null;
        JOptionPane.showMessageDialog(errorPopUp, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allGraphs;
    private javax.swing.JPanel allGraphsTab;
    private javax.swing.JButton buttonUpdateAllDataGraph;
    private javax.swing.JComboBox cbMonthFrom;
    private javax.swing.JComboBox cbMonthTo;
    private javax.swing.JCheckBox cbShowAll;
    private javax.swing.JComboBox cbYearFrom;
    private javax.swing.JComboBox cbYearTo;
    private javax.swing.JMenuItem changePassword;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JPanel foundBaggage;
    private javax.swing.JPanel foundBaggageTab;
    private javax.swing.JPanel handledBaggage;
    private javax.swing.JPanel handledBaggageTab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel labelError;
    private javax.swing.JMenuItem logout;
    private javax.swing.JPanel lostBaggage;
    private javax.swing.JPanel lostBaggageTab;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTabbedPane overviewPane;
    private javax.swing.JMenu userMenu;
    // End of variables declaration//GEN-END:variables

}
